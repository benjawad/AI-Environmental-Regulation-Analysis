# import fitz  # PyMuPDF
# import pandas as pd
# import json
# import re
# import os
# import io
# import traceback
# import numpy as np
# from PIL import Image
# import pytesseract
# from concurrent.futures import ThreadPoolExecutor
# import logging
# from typing import Dict, List, Any, Optional, Tuple
# from dataclasses import dataclass
# import pandas as pd
# import json
# import google.generativeai as genai
# import re
# import time
# from tqdm import tqdm
# # Configuration du logging
# logging.basicConfig(level=logging.INFO)
# logger = logging.getLogger(__name__)

# def generate_commitment_register(request):
#     try:
#         genai.configure(api_key=os.getenv("GENAI_API_KEY"))
#         print("Gemini API configured successfully.")
#     except Exception as e:
#         print(f"Error configuring Gemini API. Please check your API key. Error: {e}")
#         exit()

#     # Define the final 3-level hierarchical column structure
#     header = [
#         ('Commitment Register Overview', 'Register Identifier', ''),
#         ('Commitment Register Overview', 'Commitment Identifier', ''),
#         ('Commitment Register Overview', 'Commitment or Obligation', ''),
#         ('Commitment Register Overview', 'Description', ''),
#         ('Commitment Register Overview', 'Project Phase', ''),
#         ('Commitment Management', 'Potential Impact on Scope?', ''),
#         ('Commitment Management', 'Status', ''),
#         ('Commitment Management', 'Commitment Deadline', ''),
#         ('Commitment Management', 'First Lead', ''),
#         ('Commitment Management', 'Second Lead', ''),
#         ('Commitment Management', 'Third Lead', ''),
#         ('Commitment Management', 'Primary Commitment Documentation', ''),
#         ('Commitment Management', 'Impact or Hazard Addressed', ''),
#         ('Commitment Management', 'Approving Agencies', ''),
#         ('Commitment Management', 'Other Stakeholders', ''),
#         ('Commitment Management', 'Affected Areas or Processes', 'Preparation/construction'),
#         ('Commitment Management', 'Affected Areas or Processes', 'Operation'),
#         ('Commitment Management', 'Affected Areas or Processes', 'Input Management'),
#         ('Commitment Management', 'Affected Areas or Processes', 'Discharge management'),
#         ('Commitment Management', 'Affected Areas or Processes', 'Off-Sites'),
#         ('Commitment Management', 'Affected Areas or Processes', 'Other'),
#         ('Commitment Management', 'Affected Areas or Processes', 'Fungibility'),
#         ('Commitment Management', 'Impact', 'CAPEX'),
#         ('Commitment Management', 'Impact', 'OPEX'),
#         ('Commitment Management', 'Impact', 'Health & Safety'),
#         ('Commitment Management', 'Impact', 'Social'),
#         ('Commitment Management', 'Impact', 'Economic'),
#         ('Commitment Management', 'Impact', 'Environmental'),
#         ('Commitment Management', 'Impact', 'Regulatory'),
#         ('Commitment Management', 'Comments', ''),
#         ('Commitment Management', 'Requires Change Order?', '')
#     ]
#     columns = pd.MultiIndex.from_tuples(header)


#     # --- 2. DATA PREPARATION: Functions to load and search the knowledge base ---

#     def load_and_prepare_knowledge_base(json_file_path):
#         # This function remains unchanged
#         try:
#             with open(json_file_path, 'r', encoding='utf-8') as f:
#                 data = json.load(f)
#         except FileNotFoundError:
#             print(f"Error: The file {json_file_path} was not found.")
#             return None
#         knowledge_base = []
#         for doc_path, doc_data in data['results'].items():
#             full_text = ""
#             for page in doc_data.get('pages', []):
#                 if 'content' in page and 'text_structure' in page['content']:
#                     full_text += page['content']['text_structure'].get('title_text', '') + "\n"
#                     full_text += page['content']['text_structure'].get('body_text', '') + "\n"
#             if full_text:
#                 knowledge_base.append({
#                     "filename": doc_data.get('filename', 'N/A'),
#                     "document_type": doc_data.get('document_type', 'N/A'),
#                     "content": full_text.lower()
#                 })
#         print(f"Knowledge base created with {len(knowledge_base)} documents.")
#         return knowledge_base

#     def find_relevant_documents(commitment_description, knowledge_base):
#         if not isinstance(commitment_description, str):
#             commitment_description = str(commitment_description) if commitment_description is not None else ""
#         commitment_description = commitment_description.lower()
#         keywords = set(re.findall(r'\b[a-zA-Zçéàèùâêîôûæœ\d]{4,}\b', commitment_description))
#         relevant_texts = []
#         for doc in knowledge_base:
#             if any(keyword in doc['filename'].lower() for keyword in keywords) or \
#             any(keyword in doc['content'] for keyword in keywords):
#                 relevant_texts.append(
#                     f"--- START OF RELEVANT DOCUMENT ({doc['filename']}) ---\n{doc['content']}\n--- END OF DOCUMENT ---\n"
#                 )
#         return "\n".join(relevant_texts)


#     def extract_commitments_from_project(project_description, knowledge_base):
#         model = genai.GenerativeModel('gemini-2.5-flash')

#         prompt = f"""
#         You are an expert Moroccan environmental and project management compliance analyst.
#         From the following project description and legal documents, extract a list of commitments or obligations
#         that should appear in a Commitment Register.

#         **PROJECT DESCRIPTION:**
#         {project_description}

#         **KNOWLEDGE BASE (EXCERPTS):**
#         {''.join([doc['content'][:2000] for doc in knowledge_base])}  # truncate for token safety

#         **TASK:**
#         - Identify commitments, obligations, or policies that the project must respect.
#         - For each commitment, fill out:
#         - Register Identifier
#         - Commitment Identifier
#         - Commitment or Obligation
#         - Description
#         - Project Phase
#         - Status (if inferable, else "")
#         - Commitment Deadline (if inferable, else "")
#         - First Lead / Second Lead / Third Lead (if inferable, else "")
#         - Primary Commitment Documentation

#         **OUTPUT FORMAT (JSON array ONLY, no extra text):**
#         [
#         {{
#             "Register Identifier": "…",
#             "Commitment Identifier": "…",
#             "Commitment or Obligation": "…",
#             "Description": "…",
#             "Project Phase": "…",
#             "Status": "",
#             "Commitment Deadline": "",
#             "First Lead": "",
#             "Second Lead": "",
#             "Third Lead": "",
#             "Primary Commitment Documentation": ""
#         }},
#         ...
#         ]
#         """

#         response = model.generate_content(prompt)
#         try:
#             commitments = json.loads(response.text.strip().lstrip("```json").rstrip("```"))
#             return commitments
#         except Exception as e:
#             print("Error parsing Gemini commitments:", e)
#             return []

#     # --- 3. CORE LOGIC: Updated function to call Gemini with all context ---

#     def call_gemini_to_complete_row(commitment_row, relevant_texts, project_description):
#         """Crafts the prompt with all context and calls the Gemini API."""
#         model = genai.GenerativeModel('gemini-2.5-flash')

#         commitment_desc = commitment_row[('Commitment Register Overview', 'Description', '')]
#         commitment_id = commitment_row[('Commitment Register Overview', 'Commitment Identifier', '')]

#         prompt = f"""
#         You are an expert Moroccan environmental and project management compliance analyst.
#         Your task is to complete a row in a project's Commitment Register by synthesizing information from three sources: the project's description, the specific commitment, and relevant legal documents.

#         **SOURCE 1: PROJECT DESCRIPTION**
#         {project_description}

#         **SOURCE 2: COMMITMENT CONTEXT**
#         - Commitment ID: "{commitment_id}"
#         - Commitment Description: "{commitment_desc}"

#         **SOURCE 3: LEGAL EVIDENCE (Relevant Moroccan regulations and laws)**
#         {relevant_texts}

#         **TASK:**
#         Based on ALL THREE sources provided, analyze how the commitment relates to the project phase, its objectives, and the legal requirements. Then, fill in the following fields. If information is not available, return an empty string "". Be concise and accurate. Output ONLY a valid JSON object, with no other text or markdown.

#         **OUTPUT FORMAT (JSON ONLY):**
#         {{
#         "Impact or Hazard Addressed": "Identify the specific risk or hazard. Example: 'Risk of air pollution from emissions exceeding legal limits during the operational phase.'",
#         "Approving Agencies": "List the relevant government bodies mentioned. Example: 'Ministry of Energy Transition, Authorities coordinated by the Customer'",
#         "Comments": "Provide a brief analysis connecting the commitment to the law and project phase. Mention specific limit values if found. Example: 'As the project is in the FEED phase, this commitment ensures compliance with Law 13-03 is designed in from the start. VLG for SO2 is 500 mg/m3.'",
#         "Affected_Preparation_Construction": "Enter 'x' if relevant, otherwise ''",
#         "Affected_Operation": "Enter 'x' if relevant, otherwise ''",
#         "Affected_Discharge_Management": "Enter 'x' if relevant, otherwise ''",
#         "Impact_Health_Safety": "Enter 'x' if relevant, otherwise ''",
#         "Impact_Environmental": "Enter 'x' if relevant, otherwise ''",
#         "Impact_Regulatory": "Enter 'x' if relevant, otherwise ''"
#         }}
#         """

#         try:
#             response = model.generate_content(prompt)
#             cleaned_response = response.text.strip().lstrip("```json").rstrip("```")
#             return json.loads(cleaned_response)
#         except json.JSONDecodeEror:
#             tqdm.write(f"Error: Gemini returned a non-JSON response for '{commitment_id}':\n{response.text}")
#             return None
#         except Exception as e:
#             tqdm.write(f"An unexpected error occurred with Gemini API for '{commitment_id}': {e}")
#             return None

#     def normalize_commitments_to_columns(commitments, columns):
#         normalized_rows = []

#         for com in commitments:
#             # Start with all empty
#             row = {col: "" for col in columns}

#             # Map values into the correct MultiIndex positions
#             row[('Commitment Register Overview', 'Register Identifier', '')] = com.get("Register Identifier", "")
#             row[('Commitment Register Overview', 'Commitment Identifier', '')] = com.get("Commitment Identifier", "")
#             row[('Commitment Register Overview', 'Commitment or Obligation', '')] = com.get("Commitment or Obligation", "")
#             row[('Commitment Register Overview', 'Description', '')] = com.get("Description", "")
#             row[('Commitment Register Overview', 'Project Phase', '')] = com.get("Project Phase", "")

#             row[('Commitment Management', 'Status', '')] = com.get("Status", "")
#             row[('Commitment Management', 'Commitment Deadline', '')] = com.get("Commitment Deadline", "")
#             row[('Commitment Management', 'First Lead', '')] = com.get("First Lead", "")
#             row[('Commitment Management', 'Second Lead', '')] = com.get("Second Lead", "")
#             row[('Commitment Management', 'Third Lead', '')] = com.get("Third Lead", "")
#             row[('Commitment Management', 'Primary Commitment Documentation', '')] = com.get("Primary Commitment Documentation", "")

#             normalized_rows.append(row)

#         return pd.DataFrame(normalized_rows, columns=columns)

#     # --- 4. MAIN EXECUTION SCRIPT ---
    
#     # Define the static project description context
    

#     knowledge_base = load_and_prepare_knowledge_base('robust_parsing_results.json')
#     if knowledge_base is None:
#         exit()

#     # initial_commitments_data = [
#     #     ["Moroccan environmental regulation", "Law n° 13-03 relating to the fight against air pollution", "Legal obligation", "Controlling the atmospheric emissions during industrial operations while ensuring good air quality.", "Design/Operation", "High", "In Progress", "During operational phase", "HSE Client", "Environment Client", "", "Environmental Report", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
#     #     ["OCP Group objectives and commitment", "Liquid effluents policy", "Commitment", "Complying with legal regulatory national and international requirements for liquid discharge to ensure the prevention and control of related environmental risks.", "Design/Construction/Operation", "High", "In Progress", "During Design, construction and operation phases", "Process Engineering", "Environmental Engineering", "Civil Engineering", "Environmental Design criteria; Liquid effluents policy (OCP)", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
#     #     ["OCP Group objectives and commitment", "Waste management policy", "Commitment", "Responsibly manage the waste generated by the project, respecting national and internationally recognized guidelines.", "Design/Construction/Operation", "High", "In Progress", "During design Construction and operation phases", "Environmental Engineering", "HSE Client", "Environment-Construction Contractors", "Waste management plan", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""]
#     # ]
#     initial_commitments_data =  extract_commitments_from_project(project_description_context, knowledge_base)
#     df_initial = normalize_commitments_to_columns(initial_commitments_data, columns=columns)
#     df_initial = df_initial.fillna("")

#     df_final = df_initial.copy()


#     # Wrap the loop with tqdm for a progress bar
#     for index, row in tqdm(df_initial.iterrows(), total=len(df_initial), desc="Analyzing Commitments"):
#         commitment_description = row[('Commitment Register Overview', 'Description', '')]

#         relevant_texts = find_relevant_documents(commitment_description, knowledge_base)

#         if not relevant_texts:
#             tqdm.write(f"  -> No relevant documents for '{row[('Commitment Register Overview', 'Commitment Identifier', '')]}'. Skipping.")
#             continue

#         # Call the updated function with the project description
#         extracted_data = call_gemini_to_complete_row(row, relevant_texts, project_description_context)

#         time.sleep(2) # Respect API rate limits

#         if extracted_data:
#             df_final.loc[index, ('Commitment Management', 'Impact or Hazard Addressed', '')] = extracted_data.get("Impact or Hazard Addressed", "")
#             df_final.loc[index, ('Commitment Management', 'Approving Agencies', '')] = extracted_data.get("Approving Agencies", "")
#             df_final.loc[index, ('Commitment Management', 'Comments', '')] = extracted_data.get("Comments", "")
#             df_final.loc[index, ('Commitment Management', 'Affected Areas or Processes', 'Preparation/construction')] = extracted_data.get("Affected_Preparation_Construction", "")
#             df_final.loc[index, ('Commitment Management', 'Affected Areas or Processes', 'Operation')] = extracted_data.get("Affected_Operation", "")
#             df_final.loc[index, ('Commitment Management', 'Affected Areas or Processes', 'Discharge management')] = extracted_data.get("Affected_Discharge_Management", "")
#             df_final.loc[index, ('Commitment Management', 'Impact', 'Health & Safety')] = extracted_data.get("Impact_Health_Safety", "")
#             df_final.loc[index, ('Commitment Management', 'Impact', 'Environmental')] = extracted_data.get("Impact_Environmental", "")
#             df_final.loc[index, ('Commitment Management', 'Impact', 'Regulatory')] = extracted_data.get("Impact_Regulatory", "")
#         else:
#             tqdm.write(f"  -> Failed to get a valid response from Gemini for '{row[('Commitment Register Overview', 'Commitment Identifier', '')]}'.")

#     print("\n\n### --- FINAL DYNAMICALLY COMPLETED COMMITMENT REGISTER --- ###")
#     pd.set_option('display.max_columns', None)
#     pd.set_option('display.width', 2200)
#     print(df_final)

